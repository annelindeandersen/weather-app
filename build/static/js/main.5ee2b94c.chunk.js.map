{"version":3,"sources":["components/forecasts/TodayPage.js","components/about/AboutPage.js","components/forms/FormPage.js","App.js","serviceWorker.js","index.js"],"names":["TodayPage","id","this","props","city","country","img","alt","src","temperature","mintemp","maxtemp","wind","humidity","description","error","React","Component","AboutPage","Form","onSubmit","getWeather","type","name","placeholder","API_KEY","App","e","a","preventDefault","target","elements","value","fetch","getApi","json","data","console","log","setState","weather","icon","main","temp","temp_min","temp_max","speed","sys","undefined","state","decsription","then","response","location","basename","className","to","exact","path","component","Boolean","window","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"uUAEqBA,E,iLAEb,OACI,yBAAKC,GAAG,gBAEFC,KAAKC,MAAMC,MAAQF,KAAKC,MAAME,SAAW,wBAAIJ,GAAG,QAAQC,KAAKC,MAAMC,KAA1B,KAAkCF,KAAKC,MAAME,SAEtFH,KAAKC,MAAMG,KAAO,yBAAKC,IAAI,UAAUC,IAAG,cAASN,KAAKC,MAAMG,IAApB,UAC1C,6BACMJ,KAAKC,MAAMM,aAAe,mDAAyBP,KAAKC,MAAMM,YAApC,UAC1BP,KAAKC,MAAMO,SAAW,kDAAwBR,KAAKC,MAAMO,QAAnC,UACtBR,KAAKC,MAAMQ,SAAW,mDAAyBT,KAAKC,MAAMQ,QAApC,UACtBT,KAAKC,MAAMS,MAAQ,0CAAgBV,KAAKC,MAAMS,KAA3B,QACnBV,KAAKC,MAAMU,UAAY,wCAAcX,KAAKC,MAAMU,SAAzB,KACvBX,KAAKC,MAAMW,aAAe,0CAAgBZ,KAAKC,MAAMW,YAA3B,KAC1BZ,KAAKC,MAAMY,OAAS,2BAAIb,KAAKC,MAAMY,MAAf,W,GAfHC,IAAMC,WCAxBC,E,iLAEb,OACI,yBAAKjB,GAAG,aACJ,6CACA,6nBAEA,6BAAK,6BAFL,mmC,GALuBe,IAAMC,WCAxBE,E,iLAEb,OACI,yBAAKlB,GAAG,eACJ,0CACA,0BAAMmB,SAAUlB,KAAKC,MAAMkB,YACvB,2BAAOC,KAAK,OAAOC,KAAK,OAAOC,YAAY,SAC3C,2BAAOF,KAAK,OAAOC,KAAK,UAAUC,YAAY,YAC9C,qD,GARcR,IAAMC,WCKlCQ,EAAU,mCAgHDC,E,YA5Gb,WAAYvB,GAAQ,IAAD,8BACjB,4CAAMA,KA+BRkB,WAhCmB,uCAgCN,WAAOM,GAAP,qBAAAC,EAAA,6DACXD,EAAEE,iBACIzB,EAAOuB,EAAEG,OAAOC,SAAS3B,KAAK4B,MAC9B3B,EAAUsB,EAAEG,OAAOC,SAAS1B,QAAQ2B,MAH/B,SAIWC,MAAM,oDAAD,OAAqD7B,EAArD,YAA6DC,EAA7D,kBAA8EoB,EAA9E,kBAJhB,cAILS,EAJK,gBAKQA,EAAOC,OALf,OAKLC,EALK,OAQPhC,GAAQC,GACVgC,QAAQC,IAAIF,GACZ,EAAKG,SAAS,CACZjC,IAAK8B,EAAKI,QAAQ,GAAGC,KACrBhC,YAAa2B,EAAKM,KAAKC,KACvBjC,QAAS0B,EAAKM,KAAKE,SACnBjC,QAASyB,EAAKM,KAAKG,SACnBjC,KAAMwB,EAAKxB,KAAKkC,MAChB1C,KAAMgC,EAAKb,KACXlB,QAAS+B,EAAKW,IAAI1C,QAClBQ,SAAUuB,EAAKM,KAAK7B,SACpBC,YAAasB,EAAKI,QAAQ,GAAG1B,eAI/B,EAAKyB,SAAS,CACZjC,SAAK0C,EACLvC,iBAAauC,EACbtC,aAASsC,EACTrC,aAASqC,EACTpC,UAAMoC,EACN5C,UAAM4C,EACN3C,aAAS2C,EACTnC,cAAUmC,EACVlC,iBAAakC,EACbjC,MAAO,wCAjCA,4CAhCM,sDAEjB,EAAKkC,MAAQ,CACX3C,SAAK0C,EACLvC,iBAAauC,EACbtC,aAASsC,EACTrC,aAASqC,EACTpC,UAAMoC,EACN5C,UAAM4C,EACN3C,aAAS2C,EACTnC,cAAUmC,EACVE,iBAAaF,EACbjC,WAAOiC,GAZQ,E,iFAgBE,IAAD,OAClBf,MAAM,oEAAD,OAAqER,EAArE,kBACJ0B,MAAK,SAAAC,GAAQ,OAAIA,EAASjB,UAC1BgB,MAAK,SAAAE,GAAQ,OAAI,EAAKd,SAAS,CAC9BjC,IAAK+C,EAASb,QAAQ,GAAGC,KACvBhC,YAAa4C,EAASX,KAAKC,KAC3BjC,QAAS2C,EAASX,KAAKE,SACvBjC,QAAS0C,EAASX,KAAKG,SACvBjC,KAAMyC,EAASzC,KAAKkC,MACpB1C,KAAMiD,EAAS9B,KACflB,QAASgD,EAASN,IAAI1C,QACtBQ,SAAUwC,EAASX,KAAK7B,SACxBC,YAAauC,EAASb,QAAQ,GAAG1B,mB,+BA2CrC,OACE,kBAAC,IAAD,CAAQwC,SAAS,gBACjB,yBAAKC,UAAU,WACb,6BACE,4BACI,kBAAC,IAAD,CAAMC,GAAG,KAAT,eACA,mCACA,kBAAC,IAAD,CAAMA,GAAG,UAAT,WAKN,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,SAASC,UAAWzC,IAEtC,kBAAC,IAAD,CAAOuC,OAAK,EAACC,KAAK,KAChB,kBAAC,EAAD,CAAMrC,WAAYnB,KAAKmB,aACvB,kBAAC,EAAD,CACEf,IAAKJ,KAAK+C,MAAM3C,IAChBG,YAAaP,KAAK+C,MAAMxC,YACxBC,QAASR,KAAK+C,MAAMvC,QACpBC,QAAST,KAAK+C,MAAMtC,QACpBC,KAAMV,KAAK+C,MAAMrC,KACjBR,KAAMF,KAAK+C,MAAM7C,KACjBC,QAASH,KAAK+C,MAAM5C,QACpBQ,SAAUX,KAAK+C,MAAMpC,SACrBC,YAAaZ,KAAK+C,MAAMnC,YACxBC,MAAOb,KAAK+C,MAAMlC,gB,GApGdC,IAAMC,WCGJ2C,QACW,cAA7BC,OAAOR,SAASS,UAEe,UAA7BD,OAAOR,SAASS,UAEhBD,OAAOR,SAASS,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMnB,MAAK,SAAAoB,GACjCA,EAAaC,kB","file":"static/js/main.5ee2b94c.chunk.js","sourcesContent":["import React from 'react';\n\nexport default class TodayPage extends React.Component {\n    render() {\n        return (\n            <div id=\"weatherToday\">\n                {/* First part to make sure it is not there without a search. Conditional logic. */}\n                { this.props.city && this.props.country && <h2 id=\"city\">{this.props.city}, {this.props.country}</h2> }\n                {/* I build mode skal der ikke være slash foran img!! Ellers skal der. */}\n                { this.props.img && <img alt=\"weather\" src={`img/${this.props.img}.png`} /> }\n                <div>\n                    { this.props.temperature && <p>Current temperature: {this.props.temperature} °C</p> }\n                    { this.props.mintemp && <p>Lowest temperature: {this.props.mintemp} °C</p> }\n                    { this.props.maxtemp && <p>Highest temperature: {this.props.maxtemp} °C</p> }\n                    { this.props.wind && <p>Wind speed: {this.props.wind} m/s</p> }\n                    { this.props.humidity && <p>Humidity: {this.props.humidity}%</p> }\n                    { this.props.description && <p>Conditions: {this.props.description} </p> }\n                    { this.props.error && <p>{this.props.error} </p> }\n                </ div>\n\n            </div>\n        );\n    }\n}","import React from 'react';\n\nexport default class AboutPage extends React.Component {\n    render() {\n        return (\n            <div id=\"aboutPage\">\n                <h1>About the app</h1>\n                <p>\n                Lorizzle ipsizzle dolor sit amet, consectetuer adipiscing shizznit. Nullizzle sapien velizzle, aliquet volutpizzle, suscipit quizzle, gangsta vizzle, boofron. Pellentesque eget tortor. Sed erizzle. Fusce go to hizzle dolor dapibizzle turpis tempus the bizzle. Mauris pellentesque nibh izzle turpis. Fizzle izzle tortor. Pellentesque eleifend rhoncizzle nisi. In hac fo shizzle rizzle dictumst. Cool dapibizzle. Yo mamma i saw beyonces tizzles and my pizzle went crizzle izzle, pretizzle you son of a bizzle, break yo neck, yall yippiyo, eleifend vitae, nunc. Shit gangster. Boofron semper dawg sed purizzle.\n                <br/><br/>\n                Etizzle shit urna ut nisl. Bow wow wow quizzle arcu. Stuff crunk, ipsizzle break yo neck, yall mammasay mammasa mamma oo sa scelerisque, break it down mah nizzle check out this ghetto, yo owned crazy gangsta izzle i saw beyonces tizzles and my pizzle went crizzle. Vivamus things, tortizzle izzle varizzle mah nizzle, nibh nunc ultricizzle away, in gangster shizzlin dizzle fo shizzle shiznit dizzle. Maurizzle things, orci vel volutpizzle consectetuer, stuff augue luctizzle nisi, pot bibendum enizzle gizzle izzle nisl. Yippiyo yo mamma velit izzle orci eleifend the bizzle. Phasellus nec shiznit. Curabitur nizzle velizzle check out this fizzle sodales facilisizzle. Check it out sapien nulla, iaculizzle that's the shizzle, molestie sizzle, egestizzle fizzle, erizzle. Brizzle vitae stuff quis nibh bibendizzle shizznit. Nizzle dope consectetizzle fizzle. Aliquizzle cool volutpizzle. Nunc yo leo at ass pretizzle faucibizzle. Crizzle nec lacizzle mofo dui hizzle uhuh ... yih!. Ut nisl. Shiznit izzle urna. Integizzle black ipsizzle i saw beyonces tizzles and my pizzle went crizzle mi. Fo shizzle izzle phat.\n                </p>\n            </div>\n        );\n    }\n}","import React from 'react';\n\nexport default class Form extends React.Component {\n    render() {\n        return (\n            <div id=\"formWrapper\">\n                <h1>Location: </h1>\n                <form onSubmit={this.props.getWeather}>\n                    <input type=\"text\" name=\"city\" placeholder=\"city\" />\n                    <input type=\"text\" name=\"country\" placeholder=\"country\" />\n                    <button>Get weather</button>\n                </form>\n            </div>\n        );\n    }\n}","import React from 'react';\n// import logo from './logo.svg';\nimport './App.css';\nimport { BrowserRouter as Router, Switch, Route, Link } from \"react-router-dom\";\nimport TodayPage from './components/forecasts/TodayPage';\nimport AboutPage from './components/about/AboutPage';\nimport Form from './components/forms/FormPage';\nconst API_KEY = '218bb6778b149b1cdd63b367b162c3dd';\n\nclass App extends React.Component {\n  // can also just be state = {} instead of constructor!\n  constructor(props) {\n    super(props);\n    this.state = {\n      img: undefined,\n      temperature: undefined,\n      mintemp: undefined,\n      maxtemp: undefined,\n      wind: undefined,\n      city: undefined,\n      country: undefined,\n      humidity: undefined,\n      decsription: undefined,\n      error: undefined\n    }\n  }\n\n  componentDidMount() {\n    fetch(`http://api.openweathermap.org/data/2.5/weather?q=London,uk&appid=${API_KEY}&units=metric`) \n    .then(response => response.json())\n    .then(location => this.setState({\n      img: location.weather[0].icon,\n        temperature: location.main.temp,\n        mintemp: location.main.temp_min,\n        maxtemp: location.main.temp_max,\n        wind: location.wind.speed,\n        city: location.name,\n        country: location.sys.country,\n        humidity: location.main.humidity,\n        description: location.weather[0].description\n    }));\n  }\n\n  getWeather = async (e) => {\n    e.preventDefault();\n    const city = e.target.elements.city.value;\n    const country = e.target.elements.country.value;\n    const getApi =  await fetch(`http://api.openweathermap.org/data/2.5/weather?q=${city},${country}&appid=${API_KEY}&units=metric`) \n    const data = await getApi.json();\n    \n    // if statement so the app does not break without input.\n    if (city && country) {\n      console.log(data);\n      this.setState({\n        img: data.weather[0].icon,\n        temperature: data.main.temp,\n        mintemp: data.main.temp_min,\n        maxtemp: data.main.temp_max,\n        wind: data.wind.speed,\n        city: data.name,\n        country: data.sys.country,\n        humidity: data.main.humidity,\n        description: data.weather[0].description\n      });\n      // document.querySelector('#weatherToday').style.display = 'grid';\n    } else {\n      this.setState({\n        img: undefined,\n        temperature: undefined,\n        mintemp: undefined,\n        maxtemp: undefined,\n        wind: undefined,\n        city: undefined,\n        country: undefined,\n        humidity: undefined,\n        description: undefined,\n        error: \"Sorry, please enter correct values.\"\n      });\n    }\n  }\n\n  render() {\n    return (\n      <Router basename=\"/weather-app\">\n      <div className=\"wrapper\">\n        <nav>\n          <ul>\n              <Link to=\"/\">Weather now</Link>\n              <div>//</div>\n              <Link to=\"/about\">About</Link>\n          </ul>\n        </nav>\n        {/* A <Switch> looks through its children <Route>s and\n            renders the first one that matches the current URL. */}\n        <Switch>\n          <Route exact path=\"/about\" component={AboutPage} />\n          {/* <Route exact path=\"/\" component={TodayPage, Form} /> */}\n          <Route exact path=\"/\">\n            <Form getWeather={this.getWeather} />\n            <TodayPage \n              img={this.state.img}\n              temperature={this.state.temperature}\n              mintemp={this.state.mintemp}\n              maxtemp={this.state.maxtemp}\n              wind={this.state.wind}\n              city={this.state.city}\n              country={this.state.country}\n              humidity={this.state.humidity}\n              description={this.state.description}\n              error={this.state.error}\n            />\n          </Route>\n        </Switch>\n      </div>\n    </Router>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}